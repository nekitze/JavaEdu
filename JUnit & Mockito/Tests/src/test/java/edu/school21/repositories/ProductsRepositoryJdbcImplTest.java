package edu.school21.repositories;

import edu.school21.models.Product;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;

import javax.sql.DataSource;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class ProductsRepositoryJdbcImplTest {
    ProductsRepository productsRepository;

    final Product product0 = new Product(0L, "Chair", 4999.00);
    final Product product1 = new Product(1L, "Table", 6950.50);
    final Product product2 = new Product(2L, "Notebook", 99999.99);
    final Product product3 = new Product(3L, "TV", 40000.00);
    final Product product4 = new Product(4L, "PblLesos3000", 2450.00);

    final List<Product> EXPECTED_FIND_ALL_PRODUCTS = Arrays.asList(new Product[]{product0, product1, product2, product3, product4});
    final Product EXPECTED_FIND_BY_ID_PRODUCT = new Product(3L, "TV", 40000);
    final Product EXPECTED_UPDATED_PRODUCT = new Product(2L, "Notebook2", 1000.33);
    final Product EXPECTED_SAVED_PRODUCT = new Product(5L, "Smartphone", 4999.99);

    @BeforeEach
    void init() {
        DataSource dataSource = new EmbeddedDatabaseBuilder()
                .generateUniqueName(true)
                .setType(EmbeddedDatabaseType.HSQL)
                .addScripts("schema.sql", "data.sql")
                .build();

        productsRepository = new ProductsRepositoryJdbcImpl(dataSource);
    }

    @Test
    void findAllTest() {
        List<Product> actualResultList = productsRepository.findAll();
        boolean isReturnedAllProducts = EXPECTED_FIND_ALL_PRODUCTS.containsAll(actualResultList);
        Assertions.assertTrue(isReturnedAllProducts, "Method must return all Products from DB");
    }

    @Test
    void findByIdTest() {
        Optional<Product> actualResult = productsRepository.findById(3L);

        Assertions.assertTrue(actualResult.isPresent());
        Assertions.assertEquals(EXPECTED_FIND_BY_ID_PRODUCT, actualResult.get());
    }

    @Test
    void updateTest() {
        productsRepository.update(EXPECTED_UPDATED_PRODUCT);

        Optional<Product> actualResult = productsRepository.findById(2L);

        Assertions.assertTrue(actualResult.isPresent());
        Assertions.assertEquals(EXPECTED_UPDATED_PRODUCT, actualResult.get());
    }

    @Test
    void saveTest() {
        Product actualProduct = new Product(null, "Smartphone", 4999.99);
        productsRepository.save(actualProduct);
        Assertions.assertEquals(EXPECTED_SAVED_PRODUCT, actualProduct, "Method must assign correct ID generated by DB");
    }

    @Test
    void deleteTest() {
        productsRepository.delete(1L);
        Optional<Product> actualResult = productsRepository.findById(1L);
        Assertions.assertFalse(actualResult.isPresent());
    }

}
